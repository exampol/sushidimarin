@page "/"
@using BlazorApp.Data

<PageTitle>Sushi</PageTitle>
<ModalEditOrder @ref="EditOrder" OnOrderEdited="OrderEdited"></ModalEditOrder>

<center>
    @if (!bIsRoomSet)
    {
        <h1>Inserisci stanza:</h1>
        <input placeholder="Codice stanza..." type="text" @bind-value="@sRoom" />
        <button class="btn-primary" @onclick="SetRoom">Conferma</button>
    }
    else
    {
        <h1>Aggiungi ordine:</h1>
        <input placeholder="Es. 159" type="text" @bind-value="@sItem" />

        <br />
        <input style="margin-top:10px" type="number" @bind-value="@iQty" />

        <br />
        <button class="btn-primary" style="margin-top:10px" @onclick="AddOrder">Conferma</button>
        <br />
        <button class="btn-primary" style="margin-top:10px" @onclick="RemoveAll">Pulisci</button>
        <hr class="large" />
        @if (tempOrders.Keys.Count > 0)
        {
            <table class="large" border="1" style="text-align:center;">
                @for (int i = 0; i < tempOrders.Keys.Count; i++)
                {
                    string item = tempOrders.Keys.ElementAt(i);
                    <tr><td>@item</td><td>@tempOrders.Values.ElementAt(i)</td><td style="width:26px; position: relative;"><img @onclick="()=>EditOrder?.Open(item)" src="icons8-edit.svg" style="left:0; width:100%; height:100%; margin: 0; position: absolute; top: 50%; transform: translateY(-50%);" /></td></tr>
                }
            </table>
        }
    }
</center>

@code {
    private Guid User;
    private ModalEditOrder? EditOrder { get; set; }
    public string sError = "";
    public string sRoom = "";
    public bool bIsRoomSet = false;

    public string sItem = "";
    public int iQty = 1;

    public Dictionary<string, int> tempOrders = new Dictionary<string, int>();

    protected override async Task OnAfterRenderAsync(bool firstRender) { if (firstRender) User = Guid.NewGuid(); }

    public void SetRoom()
    {
        bIsRoomSet = true;
        UpdateRoom();
        MainContainer.AddCallback(sRoom, User.ToString(), UpdateRoom);
    }

    public void UpdateRoom()
    {
        tempOrders = MainContainer.GetOrders(sRoom);
        StateHasChanged();
    }

    public void RemoveAll()
    {
        MainContainer.RemoveAllOrders(sRoom);
        UpdateRoom();
    }

    public void AddOrder()
    {
        MainContainer.AddOrder(sRoom, sItem, iQty);
        sItem = "";
        iQty = 1;

        UpdateRoom();
    }

    private void OrderEdited(Tuple<string, int, int> args)
    {
        if (args.Item2 == 0) return;
        else if (args.Item2 == 2) { MainContainer.RemoveOrder(sRoom, args.Item1, -1); return; }

        if (args.Item2 > 0) MainContainer.RemoveOrder(sRoom, args.Item1, args.Item2);
    }
}